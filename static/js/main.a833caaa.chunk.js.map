{"version":3,"sources":["Chart.jsx","App.js","serviceWorker.js","index.js"],"names":["Chart","this","props","data","links","svg","d3","width","attr","height","selectAll","remove","color","simulation","force","id","d","link","append","enter","Math","sqrt","value","node","nodes","group","call","on","active","alphaTarget","restart","fx","x","fy","y","text","source","target","className","React","Component","App","search","vs","term","searchTerm","state","query","SEARCH_URL","fetch","PROXY_URL","isMoreItemsLeftToSearch","termsToSearch","toBeSearchedTerms","Object","entries","termToBeSearched","key","cleanData","terms","cleanedTerms","forEach","index","slice","length","indexOf","push","trim","toLowerCase","createNodes","depth","createLinks","generateData","currentDepth","keys","setState","setOptions","then","res","json","options","setRelatedTerms","searched","currentToBeSearchedTerms","includes","prevState","releatedTerms","maxDepth","startQuery","selectedTerm","firstTime","termToSearch","onChange","event","self","typingTimeout","clearTimeout","typing","setTimeout","autoCompleteChange","searchTimeout","status","bind","Container","maxWidth","Grid","container","spacing","item","xs","Typography","variant","gutterBottom","Autocomplete","freeSolo","disableClearable","map","option","renderInput","params","TextField","label","margin","style","InputProps","type","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.a833caaa.chunk.js","sourcesContent":["import React from \"react\";\nimport * as d3 from \"d3\";\n\nclass Chart extends React.Component {\n\n  componentDidUpdate() {\n\n    if(this.props.data.links) {\n      var svg = d3.select(\"svg.graph\"),\n      width = +svg.attr(\"width\"),\n      height = +svg.attr(\"height\");\n\n      svg.selectAll(\"*\").remove()\n\n      var color = d3.scaleOrdinal([1,2,3,4]);\n\n      var simulation = d3.forceSimulation()\n          .force(\"link\", d3.forceLink().id(function(d) { return d.id; }))\n          .force(\"charge\", d3.forceManyBody())\n          .force(\"center\", d3.forceCenter(width / 2, height / 2));\n      \n\n      var link = svg.append(\"g\")\n        .attr(\"class\", \"links\")\n        .selectAll(\"line\")\n        .data(this.props.data.links)\n        .enter().append(\"line\")\n          .attr(\"stroke-width\", function(d) { return Math.sqrt(d.value); });\n\n\n      var node = svg.append(\"g\")\n          .attr(\"class\", \"nodes\")\n        .selectAll(\"g\")\n        .data(this.props.data.nodes)\n        .enter().append(\"g\")\n        \n      var circles = node.append(\"circle\")\n          .attr(\"r\", 5)\n          .attr(\"fill\", function(d) { return color(d.group); })\n          .call(d3.drag()\n              .on(\"start\", dragstarted)\n              .on(\"drag\", dragged)\n              .on(\"end\", dragended));\n    \n      var labels = node.append(\"text\")\n          .text(function(d) {\n            return d.id;\n          })\n          .attr('x', 10)\n          .attr('y', 13);\n    \n      node.append(\"title\")\n          .text(function(d) { return d.id; });\n    \n      simulation\n          .nodes(this.props.data.nodes)\n          .on(\"tick\", ticked);\n    \n      simulation.force(\"link\")\n          .links(this.props.data.links);\n    \n      function ticked() {\n        link\n            .attr(\"x1\", function(d) { return d.source.x; })\n            .attr(\"y1\", function(d) { return d.source.y; })\n            .attr(\"x2\", function(d) { return d.target.x; })\n            .attr(\"y2\", function(d) { return d.target.y; });\n    \n        node\n            .attr(\"transform\", function(d) {\n              return \"translate(\" + d.x + \",\" + d.y + \")\";\n            })\n      }\n\n      function dragstarted(d) {\n        if (!d3.event.active) simulation.alphaTarget(0.3).restart();\n        d.fx = d.x;\n        d.fy = d.y;\n      }\n      \n      function dragged(d) {\n        d.fx = d3.event.x;\n        d.fy = d3.event.y;\n      }\n      \n      function dragended(d) {\n        if (!d3.event.active) simulation.alphaTarget(0);\n        d.fx = null;\n        d.fy = null;\n      }\n    }    \n  }\n\n  render() {\n    return <svg className=\"graph\" width=\"960\" height=\"600\"></svg>;\n  }\n}\n\nexport default Chart;\n","import React from \"react\";\nimport TextField from \"@material-ui/core/TextField\";\nimport Autocomplete from \"@material-ui/lab/Autocomplete\";\nimport Container from '@material-ui/core/Container';\nimport Grid from '@material-ui/core/Grid';\nimport Typography from '@material-ui/core/Typography';\nimport Chart from './Chart';\nimport \"./App.css\";\n\nclass App extends React.Component {\n\n  // maxDepth = to control how deep to search\n  // currentDepth = to see the current depth of the nodes. can be more than maxDepth\n  constructor() {\n    super();\n\n    this.state = {\n      firstTime: true,\n      currentDepth: 0,\n      maxDepth: 0,\n      query: '',\n      selectedTerm: '',\n      options: [],\n      releatedTerms: [],\n      toBeSearchedTerms: {},\n      data: {},\n      nodes: [],\n      links: [],\n      status: '',\n      typing: false,\n      typingTimeout: 0,\n      searchTimeout: 0,\n      PROXY_URL: 'https://cors-anywhere.herokuapp.com/',\n      SEARCH_URL: 'https://suggestqueries.google.com/complete/search?client=firefox&q=',\n    }\n\n    this.onChange = this.onChange.bind(this);\n    this.autoCompleteChange = this.autoCompleteChange.bind(this);\n  }\n\n  search = (vs, term) => {\n    const searchTerm = vs ? term + ' vs ' : this.state.query;\n    const SEARCH_URL = `${this.state.SEARCH_URL}${searchTerm}`\n\n    return fetch(this.state.PROXY_URL + SEARCH_URL)\n  }\n\n  isMoreItemsLeftToSearch = () => {\n    let termsToSearch = this.state.toBeSearchedTerms;\n    for (const [key, value] of Object.entries(termsToSearch)) {\n      if(value === 0) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  termToBeSearched = () => {\n    let termsToSearch = this.state.toBeSearchedTerms;\n    for (const [key, value] of Object.entries(termsToSearch)) {\n      if(value === 0) {\n        return key;\n      }\n    }\n    return null;\n  }\n\n  cleanData = (searchTerm, terms) => {\n    let cleanedTerms = [];\n    \n    terms.forEach((term, index) => {\n      let query = term.slice(searchTerm.length + 4);\n\n      // check for selectedTerm\n      // check if already fetched\n      // should not have spaces\n      // check if contains multiple \"vs\"\n      // console.log(query, ' ===>', cleanedTerms.indexOf(query));\n      if(query.length > 0 &&\n        cleanedTerms.length < 5 &&\n        query.indexOf(searchTerm) === -1 &&\n        query.indexOf(\" \") === -1 &&\n        cleanedTerms.indexOf(query) === -1 &&\n        query.indexOf(\" vs \") === -1) {\n          cleanedTerms.push(term.slice(searchTerm.length + 4).trim().toLowerCase());\n      }\n    });\n    return cleanedTerms;\n  }\n\n  createNodes = (searchTerm, depth) => {\n    return [{\"id\": searchTerm, \"group\": (depth + 1)}];\n  }\n\n  createLinks = (searchTerm, terms) => {\n    let links = [];\n    terms.forEach((term, index) => {\n      links.push(\n        {\n          \"source\": searchTerm,\n          \"target\": term,\n          \"value\": index + 1\n        }\n      )\n    });\n    return links;\n  }\n\n  generateData = () => {\n    let nodes = this.state.nodes;\n    let depth = this.state.currentDepth;\n    if(Object.keys(this.state.toBeSearchedTerms).length > this.state.nodes.length) {\n      for (const [key, value] of Object.entries(this.state.toBeSearchedTerms)) {\n        if(value === 0) {\n          depth += 1\n          nodes.push(\n            {\"group\": depth, \"id\": key}\n          )\n        }\n      }\n    }\n\n\n    this.setState({\n      data: {\n        \"nodes\": nodes,\n        \"links\": this.state.links\n      }\n    })\n  }\n\n  setOptions = () => {\n    this.search(false, '')\n      .then(res => res.json())\n      .then(data => {\n        this.setState({\n          options: data[1]\n        });\n      })\n  }\n\n  setRelatedTerms = (searchTerm) => {\n    this.search(true, searchTerm)\n      .then(res => res.json())\n      .then(data => {\n        let terms = data[1];\n        let searched = {[searchTerm]: 1};\n        let cleanedTerms = this.cleanData(searchTerm, terms);\n        let nodes = this.createNodes(searchTerm, this.state.currentDepth);\n        let links = this.createLinks(searchTerm, cleanedTerms);\n        cleanedTerms.forEach(term => {\n          searched = { ...searched, [term]: 0}\n        });\n\n        let currentToBeSearchedTerms = this.state.toBeSearchedTerms;\n        for (const [key, value] of Object.entries(searched)) {\n          if(!Object.keys(currentToBeSearchedTerms).includes(key)) {\n            currentToBeSearchedTerms = {...currentToBeSearchedTerms, [key]: 0};\n          }\n        }\n        currentToBeSearchedTerms[searchTerm] = 1;\n        \n        this.setState(prevState => ({\n          releatedTerms: cleanedTerms,\n          toBeSearchedTerms: currentToBeSearchedTerms,\n          nodes: [...prevState.nodes, ...nodes],\n          links: [...prevState.links, ...links],\n          maxDepth: prevState.maxDepth + 1,\n          currentDepth: prevState.currentDepth + 1,\n        }), this.startQuery);\n      });\n  }\n\n  startQuery = () => {\n    if(this.state.selectedTerm !== \"\" &&\n      (this.state.firstTime || this.isMoreItemsLeftToSearch()) && \n      this.state.maxDepth < 5\n    ) {\n      let termToSearch = '';\n      if(this.state.firstTime) {\n        termToSearch = this.state.selectedTerm;\n        this.setState({\n          firstTime: false\n        }, this.setRelatedTerms(termToSearch))\n      } else {\n        termToSearch = this.termToBeSearched();\n        this.setRelatedTerms(termToSearch);\n      }\n    } else {\n      this.generateData();\n    }\n  }\n\n  onChange = (event) => {\n    const self = this;\n\n    if (self.state.typingTimeout) {\n       clearTimeout(self.state.typingTimeout);\n    }\n\n    self.setState({\n       query: event.target.value,\n       typing: false,\n       typingTimeout: setTimeout(function () {\n          if(self.state.query !== \"\") {\n            self.setOptions();\n          } else {\n            self.setState({\n              data: {},\n              nodes: [],\n              links: [],\n            });\n          }\n         }, 1000)\n    });\n  }\n\n  autoCompleteChange = (event, value) => {\n    const self = this;\n\n    if (self.state.searchTimeout) {\n      clearTimeout(self.state.searchTimeout);\n    }\n\n    self.setState({\n      selectedTerm: value,\n      status: '',\n      firstTime: true,\n      currentDepth: 0,\n      maxDepth: 0,\n      releatedTerms: [],\n      toBeSearchedTerms: {},\n      data: {},\n      nodes: [],\n      links: [],\n      searchTimeout: setTimeout(function () {\n        self.startQuery();\n      }, 1000)\n    });\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <Container maxWidth=\"xl\">\n          <Grid container spacing={3}>\n            <Grid item xs={12} className=\"App-header\">\n              <Typography variant=\"h2\" gutterBottom> Find Related Ideas </Typography>  \n            </Grid>\n            <Grid item xs={12} className=\"App-header\">\n              <Autocomplete\n              freeSolo\n              id=\"free-solo-2-demo\"\n              disableClearable\n              options={this.state.options.map((option) => option)}\n              onChange={this.autoCompleteChange}\n              renderInput={(params) => (\n                <TextField\n                  {...params}\n                  label=\"Find relations for ...\"\n                  margin=\"normal\"\n                  variant=\"outlined\"\n                  style={{ width: 500 }}\n                  InputProps={{ ...params.InputProps, type: \"search\" }}\n                  onChange={this.onChange}\n                />\n              )}\n              /> \n            </Grid>\n        </Grid>\n        <Grid container spacing={3}>\n          <Grid item xs={12}>\n            <Chart data={this.state.data} />\n          </Grid>\n        </Grid>\n        </Container>\n        \n        {/* <header className=\"App-header\"> */}\n        {/* <Typography variant=\"h2\" gutterBottom> Find Related Ideas </Typography>       */}\n          {/* <Autocomplete\n            freeSolo\n            id=\"free-solo-2-demo\"\n            disableClearable\n            options={this.state.options.map((option) => option)}\n            onChange={this.autoCompleteChange}\n            renderInput={(params) => (\n              <TextField\n                {...params}\n                label=\"Find relations for ...\"\n                margin=\"normal\"\n                variant=\"outlined\"\n                style={{ width: 500 }}\n                InputProps={{ ...params.InputProps, type: \"search\" }}\n                onChange={this.onChange}\n              />\n            )}\n          /> */}\n          {/* <Alert severity=\"info\">{this.state.status}</Alert> */}\n        {/* </header> */}\n        {/* <Chart data={this.state.data} /> */}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}